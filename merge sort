#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>
using namespace std;
using namespace std::chrono;

void merge(int arr[], int left, int mid, int right)
{
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int *L = new int[n1];
    int *R = new int[n2];

    for (int i = 0; i < n1; ++i)
    {
        L[i] = arr[left + i];
    }
    for (int j = 0; j < n2; ++j)
    {
        R[j] = arr[mid + 1 + j];
    }

    int i = 0;
    int j = 0;
    int k = left;

    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k++] = L[i++];
        }
        else
        {
            arr[k++] = R[j++];
        }
    }

    while (i < n1)
    {
        arr[k++] = L[i++];
    }

    while (j < n2)
    {
        arr[k++] = R[j++];
    }

    delete[] L;
    delete[] R;
}

void mergeSort(int arr[], int left, int right)
{
    if (left < right)
    {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        merge(arr, left, mid, right);
    }
}

void generateRandomArray(int arr[], int n)
{
    srand(time(0));
    for (int i = 0; i < n; ++i)
    {
        arr[i] = rand() % 1000;
    }
}

void generateSortedArray(int arr[], int n)
{
    for (int i = 0; i < n; ++i)
    {
        arr[i] = i;
    }
}

void generateReverseSortedArray(int arr[], int n)
{
    for (int i = 0; i < n; ++i)
    {
        arr[i] = n - i - 1;
    }
}

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; ++i)
    {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main()
{
    int sizes[] = {10, 100, 500, 1000, 10000};
    int num_sizes = sizeof(sizes) / sizeof(sizes[0]);

    for (int k = 0; k < num_sizes; ++k)
    {
        int n = sizes[k];

        int *arr_random = new int[n];
        int *arr_sorted = new int[n];
        int *arr_reverse_sorted = new int[n];

        generateRandomArray(arr_random, n);
        generateSortedArray(arr_sorted, n);
        generateReverseSortedArray(arr_reverse_sorted, n);

        for (int t = 0; t < 3; ++t)
        {
            int *arr = nullptr;
            string type;

            switch (t)
            {
            case 0:
                arr = arr_random;
                type = "Random";
                break;
            case 1:
                arr = arr_sorted;
                type = "Sorted";
                break;
            case 2:
                arr = arr_reverse_sorted;
                type = "Reverse Sorted";
                break;
            }

            auto start = high_resolution_clock::now();
            mergeSort(arr, 0, n - 1);
            auto stop = high_resolution_clock::now();
            auto duration = duration_cast<milliseconds>(stop - start);

            cout << "Time taken for " << type << " array of size " << n << ": " << duration.count() << " milliseconds" << endl;

            // Uncomment to print sorted array (for small sizes only)
            // if (n <= 100) {
            //     cout << "Sorted array: ";
            //     printArray(arr, n);
            // }
        }

        delete[] arr_random;
        delete[] arr_sorted;
        delete[] arr_reverse_sorted;

        cout << endl;
    }

    return 0;
}
